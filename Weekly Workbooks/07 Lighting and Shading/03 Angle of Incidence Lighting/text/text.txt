Your next task is to implement "Angle-of-Incidence" lighting. This first requires you to calculate a surface normal for each triangle in the model (as shown in the slides and audio narration above). To help achieve this, you might like to use the GLM `cross` function to calculate the cross product of two edges of a triangle.

It is worth noting that the `ModelTriangle` class has a `normal` attribute that can be used to store the calculated normal for each triangle. You can calculate these normals when you first load in the OBJ geometry file - they aren't going to change during the render (unless you start changing the orientation of triangles during some kind of animation).

Once the surface normals have been calculated, you can then use these to calculate the angle of incidence of light falling onto the surfaces. This is done by taking the dot product of the normal and light direction vectors (as shown in the slides and audio narration above). To calculate dot products, you might like to use the `dot` function provided by GLM.

Once calculated, use these angles of incidence to adjust the brightness of each pixel (in a similar way to that which you did with proximity in the previous task). You should end up with a render that looks like the image shown below. If you have implemented event handlers to move the position of your light point, use this feature to test that your lighting looks realistic from a number of different positions.


